pipeline {
  agent {
    label 'node1'
  }

  parameters {
    string(defaultValue: '', description: 'Enter the package name for ${params.PACKAGE_NAME} installation', name: 'PACKAGE_NAME')
    choice(choices: ['start', 'stop'], description: 'Choose service status', name: 'SERVICE_STATUS')
  }

  stages {
    stage('Installation') {
      when {
        expression {
          params.PACKAGE_NAME == ''
        }
      }
      steps {
        input(message: 'Package name for PostgreSQL installation is not provided. Please provide the package name:', ok: 'Install')
      }
    }

    stage('Install PostgreSQL') {
      when {
        expression {
          params.PACKAGE_NAME != ''
        }
      }
      steps {
        script {
          try {
            def installed = sh(returnStatus: true, script: "dpkg -s ${params.PACKAGE_NAME} | grep 'Status: install ok installed'")
            if (installed == 0) {
              echo "${params.PACKAGE_NAME} is already installed"
            } else {
              echo "Installing package: ${params.PACKAGE_NAME}"
              sh "sudo apt update && sudo apt install -y ${params.PACKAGE_NAME}"
              echo "Installation completed successfully for ${params.PACKAGE_NAME}."
            }
          } catch (Exception e) {
            error "Failed to install package: ${params.PACKAGE_NAME}. Error: ${e.getMessage()}"
          }
        }
      }
    }

    stage('Start/Stop Service') {
      steps {
        script {
          try {
            def serviceStatus = params.SERVICE_STATUS
            if (serviceStatus == 'start') {
              echo "Starting ${params.PACKAGE_NAME} service"
              sh "sudo systemctl start ${params.PACKAGE_NAME}"
              echo "${params.PACKAGE_NAME} service started successfully."
            } else if (serviceStatus == 'stop') {
              echo "Stopping ${params.PACKAGE_NAME} service"
              sh "sudo systemctl stop ${params.PACKAGE_NAME}"
              echo "${params.PACKAGE_NAME} service stopped successfully."
            } else {
              error "Invalid service status provided. Please choose 'start' or 'stop'"
            }
          } catch (Exception e) {
            error "Failed to perform service operation. Error: ${e.getMessage()}"
          }
        }
      }
    }
  }

  post {
    always {
      echo "Script execution completed."
    }
  }
}
